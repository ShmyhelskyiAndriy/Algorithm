public class QuickSort extends Util {    static void quickSort(int arr[], int low, int high) {        if (low < high) {            int pi = partition(arr, low, high);            quickSort(arr, low, pi - 1);            quickSort(arr, pi + 1, high);        }    }    static void quickSortNeg(int arr[], int low, int high) {        if (low < high) {            int pi = partition(arr, low, high);            quickSortNeg(arr, low, pi - 1);            quickSortNeg(arr, pi + 1, high);        }    }    static void quickSortMid(int[] arr, int low, int high) {        high = high -1;        if (arr.length == 0)            return;        if (low >= high)            return;        int middle = low + (high - low) / 2;        int opora = arr[middle];        int i = low, j = high;        while (i <= j) {            while (arr[i] < opora) {                i++;            }            while (arr[j] > opora) {                j--;            }            if (i <= j) {                int temp = arr[i];                arr[i] = arr[j];                arr[j] = temp;                i++;                j--;            }        }        if (low < j)            quickSortMid(arr, low, j);        if (high > i)            quickSortMid(arr, i, high);    }    static void quickSortRand(int[] arr, int low, int high) {        high = high -1;        if (arr.length == 0)            return;        if (low >= high)            return;        int item = Util.randOp(low, high) ;        int opora = arr[item];        int i = low, j = high;        while (i <= j) {            while (arr[i] < opora) {                i++;            }            while (arr[j] > opora) {                j--;            }            if (i <= j) {                int temp = arr[i];                arr[i] = arr[j];                arr[j] = temp;                i++;                j--;            }        }        if (low < j)            quickSortRand(arr, low, j);        if (high > i)            quickSortRand(arr, i, high);    }}