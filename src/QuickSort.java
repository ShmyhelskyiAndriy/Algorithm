import java.util.Random;public class QuickSort {    // Метод швидкого сортування з опорою на останній елемент масиву    public static void quickSortLast(int[] arr, int first, int last) {        if (first < last) {            int pivot = partitionLast(arr, first, last);            quickSortLast(arr, first, pivot - 1);            quickSortLast(arr, pivot + 1, last);        }    }    // Метод для розділення масиву з опорою на останній елемент    private static int partitionLast(int[] arr, int first, int last) {        int pivot = arr[last];        int i = first - 1;        for (int j = first; j < last; j++) {            if (arr[j] <= pivot) {                i++;                int temp = arr[i];                arr[i] = arr[j];                arr[j] = temp;            }        }        int temp = arr[i + 1];        arr[i + 1] = arr[last];        arr[last] = temp;        return i + 1;    }    // Метод швидкого сортування з опорою на середній елемент масиву    public static void quickSortMid(int[] arr, int first, int last) {        if (first < last) {            int pivot = partitionMedian(arr, first, last);            quickSortMid(arr, first, pivot - 1);            quickSortMid(arr, pivot + 1, last);        }    }    // Метод для розділення масиву з опорою на середній елемент    private static int partitionMedian(int[] arr, int first, int last) {        int middle = first + (last - first) / 2;        int pivot = arr[middle];        int i = first, j = last;        while (i <= j) {            while (arr[i] < pivot) {                i++;            }            while (arr[j] > pivot) {                j--;            }            if (i <= j) {                int temp = arr[i];                arr[i] = arr[j];                arr[j] = temp;                i++;                j--;            }        }        return i;    }    // Метод швидкого сортування з опорою на випадковий елемент масиву    public static void quickSortRandom(int[] arr, int first, int last) {        if (first < last) {            int pivot = partitionRandom(arr, first, last);            quickSortRandom(arr, first, pivot - 1);            quickSortRandom(arr, pivot + 1, last);        }    }    // Метод для вибору випадкового елемента як опорного    private static int partitionRandom(int[] arr, int first, int last) {        Random rand = new Random();        int randomIndex = rand.nextInt(last - first)+1;        int pivot = arr[randomIndex];        swap(arr, randomIndex, last);        return partitionLast(arr, first, last);    }    // Метод для обміну двох елементів у масиві    private static void swap(int[] arr, int i, int j) {        int temp = arr[i];        arr[i] = arr[j];        arr[j] = temp;    }}