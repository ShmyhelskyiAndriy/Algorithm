public class QuickSort extends Util {    static void qiucksort(int arr[], int first, int last) {        if (first < last) {            int pi = partition(arr, first, last);            qiucksort(arr, first, pi - 1);            qiucksort(arr, pi + 1, last);        }    }    static void quickSortMid(int[] arr, int first, int last) {        last = last -1;        if (arr.length == 0)            return;        if (first >= last)            return;        int middle = first + (last - first) / 2;        int opora = arr[middle];        int i = first, j = last;        while (i <= j) {            while (arr[i] < opora) {                i++;            }            while (arr[j] > opora) {                j--;            }            if (i <= j) {                int temp = arr[i];                arr[i] = arr[j];                arr[j] = temp;                i++;                j--;            }        }        if (first < j)            quickSortMid(arr, first, j);        if (last > i)            quickSortMid(arr, i, last);    }    static void quickSortRand(int[] arr, int first, int last) {        last = last -1;        if (arr.length == 0)            return;        if (first >= last)            return;        int item = Util.randOp(first, last) ;        int opora = arr[item];        int i = first, j = last;        while (i <= j) {            while (arr[i] < opora) {                i++;            }            while (arr[j] > opora) {                j--;            }            if (i <= j) {                int temp = arr[i];                arr[i] = arr[j];                arr[j] = temp;                i++;                j--;            }        }        if (first < j)            quickSortRand(arr, first, j);        if (last > i)            quickSortRand(arr, i, last);    }}